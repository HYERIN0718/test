def mainDir="Chapter02/2-jenkins-docker" // 메인 디렉토리
def ecrLoginHelper="docker-credential-ecr-login" // ECR에 push할 때 필요한 로그인을 미리 전역변수로 적어둠
def region="us-east-1" // 사용하는 리전
def ecrUrl="436115905187.dkr.ecr.us-east-1.amazonaws.com/test" // ECR url
def repository="test" // 프라이빗 fp파지토리
def deployHost="172.31.81.217" // 배포서버 - AWS EC2 프리이빗 IP

pipeline { // 파이프라인을 stage별로 나눠서 명시함, 흐름을 파악할 때 사용
    agent any

    stages {
        stage('Pull Codes from Github'){
            steps{
                checkout scm
            }
        }
        stage('Build Codes by Gradle') { // Gradle을 이용한 빌드과정
            steps {
                sh """
                cd ${mainDir}
                ./gradlew clean build
                """
            }
        }
        stage('Build Docker Image by Jib & Push to AWS ECR Repository') {
            steps {
                withAWS(region:"${region}", credentials:"aws-key") { // us-east-1 리전과 ECR에 로그인하기 위한 key
                    ecrLogin()
                    sh """
                        curl -O https://amazon-ecr-credential-helper-releases.s3.us-east-1.amazonaws.com/0.4.0/linux-amd64/${ecrLoginHelper} // ECR credentials helper를 다운 받음
                        chmod +x ${ecrLoginHelper}
                        mv ${ecrLoginHelper} /usr/local/bin/ // helper를 실행할 수 있도록 PATH로 옮김
                        cd ${mainDir}
                        ./gradlew jib -Djib.to.image=${ecrUrl}/${repository}:${currentBuild.number} -Djib.console='plain' // helper는 jib을 통해 이미지를 빌드할 수 있고, gradlew를 통해 aws ECR에 레파지토리에 push함
                    """
                }
            }
        }
        stage('Deploy to AWS EC2 VM'){
            steps{
                sshagent(credentials : ["deploy-key"]) { // 젠킨스에 접속하기 위한 key
                    sh "ssh -o StrictHostKeyChecking=no ubuntu@${deployHost} \ // ssh에 접속하기 위한 명령어
                     'aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${ecrUrl}/${repository}; \ // aws ecr에 로그인
                      docker run -d -p 80:8080 -t ${ecrUrl}/${repository}:${currentBuild.number};'" // 가져온 이미지로 컨테이너 실행
                }
            }
        }
    }
}
